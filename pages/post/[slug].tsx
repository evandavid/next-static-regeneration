import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { createClient } from 'contentful';
import { documentToReactComponents } from '@contentful/rich-text-react-renderer';
import format from 'date-fns/format';

import styles from '../../styles/Home.module.css';

const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID as string,
  accessToken: process.env.CONTENTFUL_ACCESS_KEY as string,
});

const Post: NextPage = ({ blog }: any) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.post_content}>
        <h1 className={styles.title}>{blog.fields.title}</h1>
        <div className={styles.post_main_content}>
          <p className={styles.time_in_content}>
            {format(new Date(blog.fields.createdAt), 'PPPP')}
          </p>
          <div className={styles.blog_text_content}>
            <Image
              src={'https:' + blog.fields.heroImage.fields.file.url}
              width={blog.fields.heroImage.fields.file.details.image.width}
              height={blog.fields.heroImage.fields.file.details.image.height}
              alt={blog.fields.title}
            />
            {documentToReactComponents(blog.fields.content)}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export const getStaticPaths = async () => {
  const res = await client.getEntries({
    content_type: 'first-blog-post',
  });

  const paths = res.items.map((item: any) => {
    return {
      params: { slug: item.fields.slug },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export async function getStaticProps({ params }: any) {
  const { items } = await client.getEntries({
    content_type: 'first-blog-post',
    'fields.slug': params.slug,
  });

  return {
    props: {
      blog: items[0],
    },
    revalidate: 1,
  };
}

export default Post;
